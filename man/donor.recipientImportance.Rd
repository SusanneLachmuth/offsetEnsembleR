% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/donor.recipientImportance.R
\name{donor.recipientImportance}
\alias{donor.recipientImportance}
\title{Donor and recipient importance}
\usage{
donor.recipientImportance(
  standOffset,
  offsetThreshold = 1,
  nCores = NA,
  nBreaks = NA,
  outpath = NULL,
  returnResult = TRUE,
  returnTransferabilityMatrix = FALSE
)
}
\arguments{
\item{standOffset}{(dataframe) A dataframe holding pairwise (standardized) offsets between donor and recipient locations.}

\item{offsetThreshold}{(double) 'not to exceed' (standardized) offset threshold when evaluating transferability between donor and recipient locations.}

\item{nCores}{(integer) Number of cores to be used in parallel computing. If defined function will automatically perform in parallel. (default = NA).}

\item{nBreaks}{(integer) Number of chunks to subset rawOffset. Chunks will be sent to single cores. nBreaks should be equal or larger than nCores. If not defined while nCores is defined, nBreaks will be equal to nCores. (default = NA).}

\item{outpath}{(string) Paths to write results. If defined, results will automatically be written to disk. (default = NULL).}

\item{returnResult}{(boolean) if TRUE, data are (also) returned to the R environment independent of whether an outpath is specified. (default = TRUE).}

\item{returnTransferabilityMatrix}{(boolean) if TRUE, a binary transferability matrix between donors and recipients is also returned.
Caution: will highly increase the required disk space and memory! (default = FALSE).}
}
\value{
Two dataframes: 1) Donor importance, 2) Recipient importance. Row names of the output files allow connecting donor and recipient importance values to geographic locations.
Optionally, the binary transferability matrix calculated in step 1 can be returned as well.
}
\description{
Calculates pairwise transferability between donor and recipient locations as well as donor and recipient importance.). Donor Importance for each donor location is calculated as the percentage of recipient locations with a (standardized) offset below the offset threshold. Recipient Importance  of each potential recipient locations represents the percentage of donor cells with a standardized offset below the offset threshold when paired with this recipient.
}
\examples{
data(redSprucePops_blueRidge_standardizedOffset)
redSprucePops_blueRidge_DI_RI <-
donor.recipientImportance(standOffset = redSprucePops_blueRidge_standardizedOffset,
offsetThreshold = 1, returnTransferabilityMatrix = TRUE)

# view tranferability matrix:
redSprucePops_blueRidge_DI_RI[[1]][1:10,1:10]

# view donor importance:
redSprucePops_blueRidge_DI_RI[[2]][1:10,]

# Map recipient importance
# Will ned to find a way of mapping without depending on sf
#require(ggplot2)
#require(maps)
#load(blueRidge_transAlteredClimate)

# Get latitude and longitude
#dat<-cbind(blueRidge_transAlteredClimate[,1:2],redSprucePops_blueRidge_DI_RI[[3]])
#mycolors<- inlmisc::GetTolColors(n = 256,scheme = "smooth rainbow")

#map_RecImp<- ggplot2::ggplot() +
 #geom_sf(data = world, fill="ivory", color=NA, size=0.3) +
 #geom_tile(data = dat, aes(x=x, y=y, fill=recipientImportance)) +
 #scale_fill_gradientn(limits = c(0,100),colors = mycolors,
 #name ="Recipient importance (\%)", guide = "colorbar" ) +
 #geom_sf(data = lakes, fill="#A6CAE0", size=0.3)+
 #geom_sf(data = world, fill=NA, color="black", size=0.3) +
 #coord_sf(xlim = c(-90, -70), ylim = c(30, 43), expand = FALSE)+
 #xlab("Longitude") +
 #ylab("Latitude") +
 #theme_minimal()
#map_RecImp
}
